
sqian003_customproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  000008a6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008001c2  008001c2  00000a1c  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00000a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000181d  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a42  00000000  00000000  000023b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cc3  00000000  00000000  00002df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c4  00000000  00000000  00003abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e6  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005ca  00000000  00000000  00004366  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	2d c1       	rjmp	.+602    	; 0x290 <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cc 01       	movw	r24, r24
  8e:	d0 01       	movw	r26, r0
  90:	ef 01       	movw	r28, r30
  92:	f7 01       	movw	r30, r14
  94:	31 02       	muls	r19, r17
  96:	3f 02       	muls	r19, r31
  98:	6d 02       	muls	r22, r29
  9a:	9b 02       	muls	r25, r27
  9c:	c3 02       	muls	r28, r19

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	e6 ea       	ldi	r30, 0xA6	; 166
  b2:	f8 e0       	ldi	r31, 0x08	; 8
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 3c       	cpi	r26, 0xC2	; 194
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a2 ec       	ldi	r26, 0xC2	; 194
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 3e       	cpi	r26, 0xE9	; 233
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	48 d3       	rcall	.+1680   	; 0x766 <main>
  d6:	e5 c3       	rjmp	.+1994   	; 0x8a2 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <GetKeypadKey>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  da:	8f ee       	ldi	r24, 0xEF	; 239
  dc:	88 b9       	out	0x08, r24	; 8
  de:	00 00       	nop
  e0:	30 9b       	sbis	0x06, 0	; 6
  e2:	29 c0       	rjmp	.+82     	; 0x136 <GetKeypadKey+0x5c>
  e4:	31 9b       	sbis	0x06, 1	; 6
  e6:	29 c0       	rjmp	.+82     	; 0x13a <GetKeypadKey+0x60>
  e8:	32 9b       	sbis	0x06, 2	; 6
  ea:	29 c0       	rjmp	.+82     	; 0x13e <GetKeypadKey+0x64>
  ec:	33 9b       	sbis	0x06, 3	; 6
  ee:	29 c0       	rjmp	.+82     	; 0x142 <GetKeypadKey+0x68>
  f0:	8f ed       	ldi	r24, 0xDF	; 223
  f2:	88 b9       	out	0x08, r24	; 8
  f4:	00 00       	nop
  f6:	30 9b       	sbis	0x06, 0	; 6
  f8:	26 c0       	rjmp	.+76     	; 0x146 <GetKeypadKey+0x6c>
  fa:	31 9b       	sbis	0x06, 1	; 6
  fc:	26 c0       	rjmp	.+76     	; 0x14a <GetKeypadKey+0x70>
  fe:	32 9b       	sbis	0x06, 2	; 6
 100:	26 c0       	rjmp	.+76     	; 0x14e <GetKeypadKey+0x74>
 102:	33 9b       	sbis	0x06, 3	; 6
 104:	26 c0       	rjmp	.+76     	; 0x152 <GetKeypadKey+0x78>
 106:	8f eb       	ldi	r24, 0xBF	; 191
 108:	88 b9       	out	0x08, r24	; 8
 10a:	00 00       	nop
 10c:	30 9b       	sbis	0x06, 0	; 6
 10e:	23 c0       	rjmp	.+70     	; 0x156 <GetKeypadKey+0x7c>
 110:	31 9b       	sbis	0x06, 1	; 6
 112:	23 c0       	rjmp	.+70     	; 0x15a <GetKeypadKey+0x80>
 114:	32 9b       	sbis	0x06, 2	; 6
 116:	23 c0       	rjmp	.+70     	; 0x15e <GetKeypadKey+0x84>
 118:	33 9b       	sbis	0x06, 3	; 6
 11a:	23 c0       	rjmp	.+70     	; 0x162 <GetKeypadKey+0x88>
 11c:	8f e7       	ldi	r24, 0x7F	; 127
 11e:	88 b9       	out	0x08, r24	; 8
 120:	00 00       	nop
 122:	30 9b       	sbis	0x06, 0	; 6
 124:	20 c0       	rjmp	.+64     	; 0x166 <GetKeypadKey+0x8c>
 126:	31 9b       	sbis	0x06, 1	; 6
 128:	20 c0       	rjmp	.+64     	; 0x16a <GetKeypadKey+0x90>
 12a:	32 9b       	sbis	0x06, 2	; 6
 12c:	20 c0       	rjmp	.+64     	; 0x16e <GetKeypadKey+0x94>
 12e:	33 9b       	sbis	0x06, 3	; 6
 130:	20 c0       	rjmp	.+64     	; 0x172 <GetKeypadKey+0x98>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	08 95       	ret
 13a:	83 e2       	ldi	r24, 0x23	; 35
 13c:	08 95       	ret
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	08 95       	ret
 142:	8a e2       	ldi	r24, 0x2A	; 42
 144:	08 95       	ret
 146:	83 e4       	ldi	r24, 0x43	; 67
 148:	08 95       	ret
 14a:	89 e3       	ldi	r24, 0x39	; 57
 14c:	08 95       	ret
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	08 95       	ret
 152:	87 e3       	ldi	r24, 0x37	; 55
 154:	08 95       	ret
 156:	82 e4       	ldi	r24, 0x42	; 66
 158:	08 95       	ret
 15a:	86 e3       	ldi	r24, 0x36	; 54
 15c:	08 95       	ret
 15e:	85 e3       	ldi	r24, 0x35	; 53
 160:	08 95       	ret
 162:	84 e3       	ldi	r24, 0x34	; 52
 164:	08 95       	ret
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	08 95       	ret
 16a:	83 e3       	ldi	r24, 0x33	; 51
 16c:	08 95       	ret
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	08 95       	ret
 172:	81 e3       	ldi	r24, 0x31	; 49
 174:	08 95       	ret

00000176 <delay_ms>:
 176:	18 16       	cp	r1, r24
 178:	19 06       	cpc	r1, r25
 17a:	5c f0       	brlt	.+22     	; 0x192 <delay_ms+0x1c>
 17c:	08 95       	ret
 17e:	00 00       	nop
 180:	21 50       	subi	r18, 0x01	; 1
 182:	31 09       	sbc	r19, r1
 184:	e1 f7       	brne	.-8      	; 0x17e <delay_ms+0x8>
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	84 17       	cp	r24, r20
 18c:	95 07       	cpc	r25, r21
 18e:	19 f4       	brne	.+6      	; 0x196 <delay_ms+0x20>
 190:	08 95       	ret
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	27 e0       	ldi	r18, 0x07	; 7
 198:	33 e0       	ldi	r19, 0x03	; 3
 19a:	f1 cf       	rjmp	.-30     	; 0x17e <delay_ms+0x8>

0000019c <LCD_WriteCommand>:
 19c:	2e 98       	cbi	0x05, 6	; 5
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	2f 9a       	sbi	0x05, 7	; 5
 1a2:	00 00       	nop
 1a4:	2f 98       	cbi	0x05, 7	; 5
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	e5 cf       	rjmp	.-54     	; 0x176 <delay_ms>
 1ac:	08 95       	ret

000001ae <LCD_ClearScreen>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	f5 cf       	rjmp	.-22     	; 0x19c <LCD_WriteCommand>
 1b2:	08 95       	ret

000001b4 <LCD_Cursor>:
 1b4:	81 31       	cpi	r24, 0x11	; 17
 1b6:	18 f4       	brcc	.+6      	; 0x1be <LCD_Cursor+0xa>
 1b8:	81 58       	subi	r24, 0x81	; 129
 1ba:	f0 cf       	rjmp	.-32     	; 0x19c <LCD_WriteCommand>
 1bc:	08 95       	ret
 1be:	81 55       	subi	r24, 0x51	; 81
 1c0:	ed cf       	rjmp	.-38     	; 0x19c <LCD_WriteCommand>
 1c2:	08 95       	ret

000001c4 <LCD_init>:
 1c4:	84 e6       	ldi	r24, 0x64	; 100
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	d6 df       	rcall	.-84     	; 0x176 <delay_ms>
 1ca:	88 e3       	ldi	r24, 0x38	; 56
 1cc:	e7 df       	rcall	.-50     	; 0x19c <LCD_WriteCommand>
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	e5 df       	rcall	.-54     	; 0x19c <LCD_WriteCommand>
 1d2:	8f e0       	ldi	r24, 0x0F	; 15
 1d4:	e3 df       	rcall	.-58     	; 0x19c <LCD_WriteCommand>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	e1 df       	rcall	.-62     	; 0x19c <LCD_WriteCommand>
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	cb cf       	rjmp	.-106    	; 0x176 <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_WriteData>:
 1e2:	2e 9a       	sbi	0x05, 6	; 5
 1e4:	8b b9       	out	0x0b, r24	; 11
 1e6:	2f 9a       	sbi	0x05, 7	; 5
 1e8:	00 00       	nop
 1ea:	2f 98       	cbi	0x05, 7	; 5
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	c2 cf       	rjmp	.-124    	; 0x176 <delay_ms>
 1f2:	08 95       	ret

000001f4 <LCD_DisplayString>:
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	18 2f       	mov	r17, r24
 1fe:	eb 01       	movw	r28, r22
 200:	d6 df       	rcall	.-84     	; 0x1ae <LCD_ClearScreen>
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	51 f0       	breq	.+20     	; 0x21c <LCD_DisplayString+0x28>
 208:	01 e0       	ldi	r16, 0x01	; 1
 20a:	01 0f       	add	r16, r17
 20c:	81 2f       	mov	r24, r17
 20e:	d2 df       	rcall	.-92     	; 0x1b4 <LCD_Cursor>
 210:	89 91       	ld	r24, Y+
 212:	e7 df       	rcall	.-50     	; 0x1e2 <LCD_WriteData>
 214:	10 2f       	mov	r17, r16
 216:	88 81       	ld	r24, Y
 218:	81 11       	cpse	r24, r1
 21a:	f6 cf       	rjmp	.-20     	; 0x208 <LCD_DisplayString+0x14>
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <TimerSet>:
 226:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_M>
 22a:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_M+0x1>
 22e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M+0x2>
 232:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x3>
 236:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <_avr_timer_cntcurr>
 23a:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <_avr_timer_cntcurr+0x1>
 23e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_avr_timer_cntcurr+0x2>
 242:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <_avr_timer_cntcurr+0x3>
 246:	08 95       	ret

00000248 <TimerOn>:
 248:	8b e0       	ldi	r24, 0x0B	; 11
 24a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 24e:	8d e7       	ldi	r24, 0x7D	; 125
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 260:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 264:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 268:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 26c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 270:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 274:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 278:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <_avr_timer_cntcurr>
 27c:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <_avr_timer_cntcurr+0x1>
 280:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <_avr_timer_cntcurr+0x2>
 284:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <_avr_timer_cntcurr+0x3>
 288:	8f b7       	in	r24, 0x3f	; 63
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	8f bf       	out	0x3f, r24	; 63
 28e:	08 95       	ret

00000290 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 2a2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_avr_timer_cntcurr>
 2a6:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <_avr_timer_cntcurr+0x1>
 2aa:	a0 91 dc 01 	lds	r26, 0x01DC	; 0x8001dc <_avr_timer_cntcurr+0x2>
 2ae:	b0 91 dd 01 	lds	r27, 0x01DD	; 0x8001dd <_avr_timer_cntcurr+0x3>
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	a1 09       	sbc	r26, r1
 2b6:	b1 09       	sbc	r27, r1
 2b8:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <_avr_timer_cntcurr>
 2bc:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <_avr_timer_cntcurr+0x1>
 2c0:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <_avr_timer_cntcurr+0x2>
 2c4:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 2c8:	89 2b       	or	r24, r25
 2ca:	8a 2b       	or	r24, r26
 2cc:	8b 2b       	or	r24, r27
 2ce:	99 f4       	brne	.+38     	; 0x2f6 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 2d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 2da:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 2de:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 2e2:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 2e6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <_avr_timer_cntcurr>
 2ea:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <_avr_timer_cntcurr+0x1>
 2ee:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <_avr_timer_cntcurr+0x2>
 2f2:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <_avr_timer_cntcurr+0x3>
	}
}
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <A2D_init>:
unsigned char ram_user[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char ram_pass[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
	
// joystick
void A2D_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 308:	ea e7       	ldi	r30, 0x7A	; 122
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 6e       	ori	r24, 0xE0	; 224
 310:	80 83       	st	Z, r24
 312:	08 95       	ret

00000314 <transmit_data>:

// shift register
void transmit_data(unsigned char data){
	unsigned char inp = data;
	
	SET_BIT(SHIFT_REG, 3);	// SRCLR
 314:	13 9a       	sbi	0x02, 3	; 2
	CLR_BIT(SHIFT_REG, 1);	// RCLK
 316:	11 98       	cbi	0x02, 1	; 2
	
	for(m= 0; m < 8; m++){
 318:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <m>
		CLR_BIT(SHIFT_REG, 2);  // SRCLK
		inp = GET_BIT(data, m);
		if(inp) {
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	50 e0       	ldi	r21, 0x00	; 0
	
	SET_BIT(SHIFT_REG, 3);	// SRCLR
	CLR_BIT(SHIFT_REG, 1);	// RCLK
	
	for(m= 0; m < 8; m++){
		CLR_BIT(SHIFT_REG, 2);  // SRCLK
 320:	12 98       	cbi	0x02, 2	; 2
		inp = GET_BIT(data, m);
		if(inp) {
 322:	9a 01       	movw	r18, r20
 324:	00 90 cf 01 	lds	r0, 0x01CF	; 0x8001cf <m>
 328:	02 c0       	rjmp	.+4      	; 0x32e <transmit_data+0x1a>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <transmit_data+0x16>
 332:	28 23       	and	r18, r24
 334:	11 f0       	breq	.+4      	; 0x33a <transmit_data+0x26>
			SET_BIT(SHIFT_REG, 0);	// SER
 336:	10 9a       	sbi	0x02, 0	; 2
 338:	01 c0       	rjmp	.+2      	; 0x33c <transmit_data+0x28>
		}
		else {
			CLR_BIT(SHIFT_REG, 0); // SER
 33a:	10 98       	cbi	0x02, 0	; 2
		}
		SET_BIT(SHIFT_REG, 2);	// SRCLK
 33c:	12 9a       	sbi	0x02, 2	; 2
	unsigned char inp = data;
	
	SET_BIT(SHIFT_REG, 3);	// SRCLR
	CLR_BIT(SHIFT_REG, 1);	// RCLK
	
	for(m= 0; m < 8; m++){
 33e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <m>
 342:	9f 5f       	subi	r25, 0xFF	; 255
 344:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <m>
 348:	98 30       	cpi	r25, 0x08	; 8
 34a:	50 f3       	brcs	.-44     	; 0x320 <transmit_data+0xc>
		else {
			CLR_BIT(SHIFT_REG, 0); // SER
		}
		SET_BIT(SHIFT_REG, 2);	// SRCLK
	}
	SET_BIT(SHIFT_REG, 1);	// RCLK
 34c:	11 9a       	sbi	0x02, 1	; 2
 34e:	08 95       	ret

00000350 <customchar>:
}

// custom character
void customchar (unsigned char *Pattern, const char loc)
{
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	8c 01       	movw	r16, r24
	LCD_WriteCommand(0x40+(loc*8)); // sending address
 35a:	86 2f       	mov	r24, r22
 35c:	88 0f       	add	r24, r24
 35e:	88 0f       	add	r24, r24
 360:	88 0f       	add	r24, r24
 362:	80 5c       	subi	r24, 0xC0	; 192
 364:	1b df       	rcall	.-458    	; 0x19c <LCD_WriteCommand>
 366:	e8 01       	movw	r28, r16
 368:	08 5f       	subi	r16, 0xF8	; 248
 36a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i=0; i<8; i++) {
		LCD_WriteData(Pattern[i]); // pass pattern bytes to LCD
 36c:	89 91       	ld	r24, Y+
 36e:	39 df       	rcall	.-398    	; 0x1e2 <LCD_WriteData>

// custom character
void customchar (unsigned char *Pattern, const char loc)
{
	LCD_WriteCommand(0x40+(loc*8)); // sending address
	for (int i=0; i<8; i++) {
 370:	c0 17       	cp	r28, r16
 372:	d1 07       	cpc	r29, r17
 374:	d9 f7       	brne	.-10     	; 0x36c <customchar+0x1c>
		LCD_WriteData(Pattern[i]); // pass pattern bytes to LCD
	}
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <createAcc>:

// create account
void createAcc() {
	switch(acc_state) {
 380:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <acc_state>
 384:	8e 2f       	mov	r24, r30
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	89 30       	cpi	r24, 0x09	; 9
 38a:	91 05       	cpc	r25, r1
 38c:	08 f0       	brcs	.+2      	; 0x390 <createAcc+0x10>
 38e:	fe c0       	rjmp	.+508    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 390:	fc 01       	movw	r30, r24
 392:	ea 5b       	subi	r30, 0xBA	; 186
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	66 c2       	rjmp	.+1228   	; 0x864 <__tablejump2__>
		case start:
		acc_state = createUser;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
		break;
		
		case createUser:
		x = GetKeypadKey();
 39e:	08 95       	ret
 3a0:	9c de       	rcall	.-712    	; 0xda <GetKeypadKey>
 3a2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <x>
		if (j >= 4) {
 3a6:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <j>
 3aa:	94 30       	cpi	r25, 0x04	; 4
 3ac:	20 f0       	brcs	.+8      	; 0x3b6 <createAcc+0x36>
			acc_state = userCreated;
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
			break;
 3b4:	08 95       	ret
		}
		else if (x != '\0') {
 3b6:	88 23       	and	r24, r24
			LCD_WriteData(x);
 3b8:	71 f0       	breq	.+28     	; 0x3d6 <createAcc+0x56>
 3ba:	13 df       	rcall	.-474    	; 0x1e2 <LCD_WriteData>
			eeprom_write_byte(&eeprom_user[j], x);
 3bc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <j>
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <x>
 3c6:	8b 5f       	subi	r24, 0xFB	; 251
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	5d d2       	rcall	.+1210   	; 0x886 <eeprom_write_byte>
			j++;
 3cc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <j>
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <j>
		}
		acc_state = createUser;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
		break;
		
		case userCreated:
		eeprom_write_byte(&eeprom_user[4], 1);
 3dc:	08 95       	ret
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	89 e0       	ldi	r24, 0x09	; 9
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	50 d2       	rcall	.+1184   	; 0x886 <eeprom_write_byte>
		acc_state = createPw;
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
		break;
		
		case createPw:
		LCD_DisplayString(1, "Create Password:");
 3ec:	08 95       	ret
 3ee:	61 e1       	ldi	r22, 0x11	; 17
 3f0:	71 e0       	ldi	r23, 0x01	; 1
 3f2:	81 e0       	ldi	r24, 0x01	; 1
		y = GetKeypadKey();
 3f4:	ff de       	rcall	.-514    	; 0x1f4 <LCD_DisplayString>
 3f6:	71 de       	rcall	.-798    	; 0xda <GetKeypadKey>
 3f8:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <y>
		if (k >= 4) {
 3fc:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <k>
			LCD_DisplayString(1, "Password Created");
 400:	94 30       	cpi	r25, 0x04	; 4
 402:	a8 f0       	brcs	.+42     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 404:	62 e2       	ldi	r22, 0x22	; 34
 406:	71 e0       	ldi	r23, 0x01	; 1
 408:	81 e0       	ldi	r24, 0x01	; 1
			transmit_data(0xF8);
 40a:	f4 de       	rcall	.-536    	; 0x1f4 <LCD_DisplayString>
 40c:	88 ef       	ldi	r24, 0xF8	; 248
 40e:	82 df       	rcall	.-252    	; 0x314 <transmit_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	2f eb       	ldi	r18, 0xBF	; 191
 412:	86 ec       	ldi	r24, 0xC6	; 198
 414:	9d e2       	ldi	r25, 0x2D	; 45
 416:	21 50       	subi	r18, 0x01	; 1
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			_delay_ms(15000);
			transmit_data(0x00);
 420:	00 00       	nop
 422:	80 e0       	ldi	r24, 0x00	; 0
			acc_state = verifybot;
 424:	77 df       	rcall	.-274    	; 0x314 <transmit_data>
 426:	84 e0       	ldi	r24, 0x04	; 4
			break;
 428:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
		}
		else if (y != '\0') {
 42c:	08 95       	ret
 42e:	88 23       	and	r24, r24
			LCD_Cursor(17+k);
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	ac c0       	rjmp	.+344    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 434:	81 e1       	ldi	r24, 0x11	; 17
			LCD_WriteData(y);
 436:	89 0f       	add	r24, r25
 438:	bd de       	rcall	.-646    	; 0x1b4 <LCD_Cursor>
 43a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <y>
			eeprom_write_byte(&eeprom_pass[k], y);
 43e:	d1 de       	rcall	.-606    	; 0x1e2 <LCD_WriteData>
 440:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <k>
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <y>
 44a:	80 50       	subi	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
			k++;
 44e:	1b d2       	rcall	.+1078   	; 0x886 <eeprom_write_byte>
 450:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <k>
 454:	8f 5f       	subi	r24, 0xFF	; 255
			acc_state = createPw;
 456:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <k>
 45a:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
		
		case verifybot:
		LCD_DisplayString(1, "Verify you're human");
 45c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
 460:	08 95       	ret
 462:	63 e3       	ldi	r22, 0x33	; 51
 464:	71 e0       	ldi	r23, 0x01	; 1
		LCD_Cursor(17);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	c5 de       	rcall	.-630    	; 0x1f4 <LCD_DisplayString>
 46a:	81 e1       	ldi	r24, 0x11	; 17
		LCD_DisplayString(1, "1U, 2D, 1L, 3R");
 46c:	a3 de       	rcall	.-698    	; 0x1b4 <LCD_Cursor>
 46e:	67 e4       	ldi	r22, 0x47	; 71
 470:	71 e0       	ldi	r23, 0x01	; 1
 472:	81 e0       	ldi	r24, 0x01	; 1
		acc_state = jsUD;
		acc_state = jsLR;
 474:	bf de       	rcall	.-642    	; 0x1f4 <LCD_DisplayString>
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
		break;
		
		case jsUD:
		ADMUX = 7;
 47c:	08 95       	ret
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ud_input = ADC;
 484:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 488:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 48c:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ud_input+0x1>
 490:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ud_input>
		z = GetKeypadKey();
 494:	22 de       	rcall	.-956    	; 0xda <GetKeypadKey>
 496:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <z>
		if (z != '#') {
 49a:	83 32       	cpi	r24, 0x23	; 35
 49c:	d1 f0       	breq	.+52     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			if (ud_input < 512) {
 49e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ud_input>
 4a2:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ud_input+0x1>
 4a6:	81 15       	cp	r24, r1
 4a8:	22 e0       	ldi	r18, 0x02	; 2
 4aa:	92 07       	cpc	r25, r18
 4ac:	30 f4       	brcc	.+12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				++down_count;
 4ae:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <down_count>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <down_count>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			}
			else if (ud_input > 512) {
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	92 40       	sbci	r25, 0x02	; 2
 4be:	28 f0       	brcs	.+10     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				++up_count;
 4c0:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <up_count>
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <up_count>
			}
			acc_state = jsUD;
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
			break;	
		}
		else {
			acc_state = jsWait;
 4d0:	08 95       	ret
 4d2:	87 e0       	ldi	r24, 0x07	; 7
 4d4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
			break;
		}
		
		case jsLR:
		ADMUX = 6;
 4d8:	08 95       	ret
 4da:	86 e0       	ldi	r24, 0x06	; 6
 4dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		lr_input = ADC;
 4e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 4e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 4e8:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <lr_input+0x1>
 4ec:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <lr_input>
		z = GetKeypadKey();
 4f0:	f4 dd       	rcall	.-1048   	; 0xda <GetKeypadKey>
 4f2:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <z>
		if (z != '#') {
 4f6:	83 32       	cpi	r24, 0x23	; 35
 4f8:	d1 f0       	breq	.+52     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
			if (lr_input < 512) {
 4fa:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <lr_input>
 4fe:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <lr_input+0x1>
 502:	81 15       	cp	r24, r1
 504:	22 e0       	ldi	r18, 0x02	; 2
 506:	92 07       	cpc	r25, r18
 508:	30 f4       	brcc	.+12     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				++left_count;
 50a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <left_count>
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <left_count>
 514:	08 c0       	rjmp	.+16     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
			}
			else if (lr_input > 512) {
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	92 40       	sbci	r25, 0x02	; 2
 51a:	28 f0       	brcs	.+10     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
				++right_count;
 51c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <right_count>
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <right_count>
			}
			acc_state = jsLR;
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
			break;
 52c:	08 95       	ret
		}
		else {
			acc_state = jsWait;
 52e:	87 e0       	ldi	r24, 0x07	; 7
 530:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
			break;
 534:	08 95       	ret
		}
		
		case jsWait:
		if ((up_count == up_actual) && (down_count == down_actual) && (left_count == left_actual) && (right_count == right_actual)) {
 536:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <up_count>
 53a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <up_actual>
 53e:	98 13       	cpse	r25, r24
 540:	1a c0       	rjmp	.+52     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 542:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <down_count>
 546:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <down_actual>
 54a:	98 13       	cpse	r25, r24
 54c:	14 c0       	rjmp	.+40     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 54e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <left_count>
 552:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <left_actual>
 556:	98 13       	cpse	r25, r24
 558:	0e c0       	rjmp	.+28     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 55a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <right_count>
 55e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <right_actual>
			LCD_DisplayString(1, "Human Verified!");
 562:	98 13       	cpse	r25, r24
 564:	08 c0       	rjmp	.+16     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 566:	66 e5       	ldi	r22, 0x56	; 86
 568:	71 e0       	ldi	r23, 0x01	; 1
			acc_state = finish;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	43 de       	rcall	.-890    	; 0x1f4 <LCD_DisplayString>
 56e:	88 e0       	ldi	r24, 0x08	; 8
			break;
 570:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
		}
		else {
			LCD_DisplayString(1, "Bot Detected! Bye!");
 574:	08 95       	ret
 576:	66 e6       	ldi	r22, 0x66	; 102
 578:	71 e0       	ldi	r23, 0x01	; 1
 57a:	81 e0       	ldi	r24, 0x01	; 1
			// LCD_ClearScreen();
			acc_state = finish;
 57c:	3b de       	rcall	.-906    	; 0x1f4 <LCD_DisplayString>
 57e:	88 e0       	ldi	r24, 0x08	; 8
 580:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <acc_state>
			break;
		}
		
		case finish:
		// LCD_ClearScreen();
		LCD_WriteData(down_count);
 584:	08 95       	ret
 586:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <down_count>
 58a:	2b ce       	rjmp	.-938    	; 0x1e2 <LCD_WriteData>
 58c:	08 95       	ret

0000058e <login>:
		break;
	}
}

void login() {
 58e:	cf 93       	push	r28
	switch(login_state) {
 590:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <login_state>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	c9 f0       	breq	.+50     	; 0x5ca <login+0x3c>
 598:	38 f0       	brcs	.+14     	; 0x5a8 <login+0x1a>
 59a:	82 30       	cpi	r24, 0x02	; 2
 59c:	09 f4       	brne	.+2      	; 0x5a0 <login+0x12>
 59e:	84 c0       	rjmp	.+264    	; 0x6a8 <login+0x11a>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <login+0x18>
 5a4:	b8 c0       	rjmp	.+368    	; 0x716 <login+0x188>
 5a6:	dd c0       	rjmp	.+442    	; 0x762 <login+0x1d4>
 5a8:	2f eb       	ldi	r18, 0xBF	; 191
 5aa:	86 ec       	ldi	r24, 0xC6	; 198
 5ac:	9d e2       	ldi	r25, 0x2D	; 45
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <login+0x20>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <login+0x2a>
 5b8:	00 00       	nop
		case init:
		_delay_ms(15000);
		LCD_DisplayString(1, "Enter Password");
 5ba:	69 e7       	ldi	r22, 0x79	; 121
 5bc:	71 e0       	ldi	r23, 0x01	; 1
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	19 de       	rcall	.-974    	; 0x1f4 <LCD_DisplayString>
		login_state = enterPass;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
		break;
 5c8:	cc c0       	rjmp	.+408    	; 0x762 <login+0x1d4>
		
		case enterPass:
		if (try == 1) {
 5ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5ce:	81 30       	cpi	r24, 0x01	; 1
			a = GetKeypadKey();
 5d0:	11 f5       	brne	.+68     	; 0x616 <login+0x88>
 5d2:	83 dd       	rcall	.-1274   	; 0xda <GetKeypadKey>
 5d4:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <a>
			if (n >= 4) {
 5d8:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <n>
 5dc:	94 30       	cpi	r25, 0x04	; 4
 5de:	20 f0       	brcs	.+8      	; 0x5e8 <login+0x5a>
				login_state = checkPass;
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
				break;
 5e6:	bd c0       	rjmp	.+378    	; 0x762 <login+0x1d4>
			}
			else if (a != '\0') {
 5e8:	88 23       	and	r24, r24
 5ea:	89 f0       	breq	.+34     	; 0x60e <login+0x80>
				LCD_Cursor(17+n);
 5ec:	81 e1       	ldi	r24, 0x11	; 17
 5ee:	89 0f       	add	r24, r25
				LCD_WriteData('*');
 5f0:	e1 dd       	rcall	.-1086   	; 0x1b4 <LCD_Cursor>
 5f2:	8a e2       	ldi	r24, 0x2A	; 42
 5f4:	f6 dd       	rcall	.-1044   	; 0x1e2 <LCD_WriteData>
				ram_pass[n] = a;
 5f6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <n>
 5fa:	e8 2f       	mov	r30, r24
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ee 53       	subi	r30, 0x3E	; 62
 600:	fe 4f       	sbci	r31, 0xFE	; 254
 602:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <a>
 606:	90 83       	st	Z, r25
				n++;
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <n>
			}
			login_state = enterPass;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
			break;
		}
		else if (try == 2) {
 614:	a6 c0       	rjmp	.+332    	; 0x762 <login+0x1d4>
 616:	82 30       	cpi	r24, 0x02	; 2
			b = GetKeypadKey();
 618:	11 f5       	brne	.+68     	; 0x65e <login+0xd0>
 61a:	5f dd       	rcall	.-1346   	; 0xda <GetKeypadKey>
 61c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <b>
			if (o >= 4) {
 620:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <o>
 624:	94 30       	cpi	r25, 0x04	; 4
 626:	20 f0       	brcs	.+8      	; 0x630 <login+0xa2>
				login_state = checkPass;
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
				break;
			}
			else if (b != '\0') {
 62e:	99 c0       	rjmp	.+306    	; 0x762 <login+0x1d4>
				LCD_Cursor(17+o);
 630:	88 23       	and	r24, r24
 632:	89 f0       	breq	.+34     	; 0x656 <login+0xc8>
 634:	81 e1       	ldi	r24, 0x11	; 17
 636:	89 0f       	add	r24, r25
				LCD_WriteData('*');
 638:	bd dd       	rcall	.-1158   	; 0x1b4 <LCD_Cursor>
 63a:	8a e2       	ldi	r24, 0x2A	; 42
 63c:	d2 dd       	rcall	.-1116   	; 0x1e2 <LCD_WriteData>
				ram_pass[o] = b;
 63e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <o>
 642:	e8 2f       	mov	r30, r24
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	ee 53       	subi	r30, 0x3E	; 62
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <b>
 64e:	90 83       	st	Z, r25
				o++;
 650:	8f 5f       	subi	r24, 0xFF	; 255
 652:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <o>
			}
			login_state = enterPass;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
			break;
		}
		else if (try == 3) {
 65c:	82 c0       	rjmp	.+260    	; 0x762 <login+0x1d4>
 65e:	83 30       	cpi	r24, 0x03	; 3
 660:	09 f0       	breq	.+2      	; 0x664 <login+0xd6>
			c = GetKeypadKey();
 662:	7f c0       	rjmp	.+254    	; 0x762 <login+0x1d4>
 664:	3a dd       	rcall	.-1420   	; 0xda <GetKeypadKey>
 666:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <c>
			if (p >= 4) {
 66a:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <p>
 66e:	94 30       	cpi	r25, 0x04	; 4
 670:	20 f0       	brcs	.+8      	; 0x67a <login+0xec>
				login_state = checkPass;
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
				break;
			}
			else if (c != '\0') {
 678:	74 c0       	rjmp	.+232    	; 0x762 <login+0x1d4>
 67a:	88 23       	and	r24, r24
				LCD_Cursor(17+p);
 67c:	89 f0       	breq	.+34     	; 0x6a0 <login+0x112>
 67e:	81 e1       	ldi	r24, 0x11	; 17
 680:	89 0f       	add	r24, r25
 682:	98 dd       	rcall	.-1232   	; 0x1b4 <LCD_Cursor>
				LCD_WriteData('*');
 684:	8a e2       	ldi	r24, 0x2A	; 42
 686:	ad dd       	rcall	.-1190   	; 0x1e2 <LCD_WriteData>
 688:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <p>
				ram_pass[p] = c;
 68c:	e8 2f       	mov	r30, r24
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	ee 53       	subi	r30, 0x3E	; 62
 692:	fe 4f       	sbci	r31, 0xFE	; 254
 694:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <c>
 698:	90 83       	st	Z, r25
 69a:	8f 5f       	subi	r24, 0xFF	; 255
				p++;
 69c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <p>
			}
			login_state = enterPass;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
			break;
 6a6:	5d c0       	rjmp	.+186    	; 0x762 <login+0x1d4>
		}
		break;
		
		case checkPass:
		if ( (ram_pass[0] == eeprom_read_byte(&eeprom_pass[0])) && (ram_pass[1] == eeprom_read_byte(&eeprom_pass[1])) && (ram_pass[2] == eeprom_read_byte(&eeprom_pass[2])) && (ram_pass[3] == eeprom_read_byte(&eeprom_pass[3])) ) {
 6a8:	c0 91 c2 01 	lds	r28, 0x01C2	; 0x8001c2 <__data_end>
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	e2 d0       	rcall	.+452    	; 0x876 <eeprom_read_byte>
 6b2:	c8 13       	cpse	r28, r24
 6b4:	28 c0       	rjmp	.+80     	; 0x706 <login+0x178>
 6b6:	c0 91 c3 01 	lds	r28, 0x01C3	; 0x8001c3 <__data_end+0x1>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	db d0       	rcall	.+438    	; 0x876 <eeprom_read_byte>
 6c0:	c8 13       	cpse	r28, r24
 6c2:	21 c0       	rjmp	.+66     	; 0x706 <login+0x178>
 6c4:	c0 91 c4 01 	lds	r28, 0x01C4	; 0x8001c4 <__data_end+0x2>
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	d4 d0       	rcall	.+424    	; 0x876 <eeprom_read_byte>
 6ce:	c8 13       	cpse	r28, r24
 6d0:	1a c0       	rjmp	.+52     	; 0x706 <login+0x178>
 6d2:	c0 91 c5 01 	lds	r28, 0x01C5	; 0x8001c5 <__data_end+0x3>
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	cd d0       	rcall	.+410    	; 0x876 <eeprom_read_byte>
 6dc:	c8 13       	cpse	r28, r24
 6de:	13 c0       	rjmp	.+38     	; 0x706 <login+0x178>
 6e0:	68 e8       	ldi	r22, 0x88	; 136
			LCD_DisplayString(1, "Password Correct");
 6e2:	71 e0       	ldi	r23, 0x01	; 1
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	86 dd       	rcall	.-1268   	; 0x1f4 <LCD_DisplayString>
 6e8:	88 ef       	ldi	r24, 0xF8	; 248
 6ea:	14 de       	rcall	.-984    	; 0x314 <transmit_data>
			transmit_data(0xF8);
 6ec:	2f eb       	ldi	r18, 0xBF	; 191
 6ee:	86 ec       	ldi	r24, 0xC6	; 198
 6f0:	9d e2       	ldi	r25, 0x2D	; 45
 6f2:	21 50       	subi	r18, 0x01	; 1
 6f4:	80 40       	sbci	r24, 0x00	; 0
 6f6:	90 40       	sbci	r25, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <login+0x164>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <login+0x16e>
 6fc:	00 00       	nop
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
			_delay_ms(15000);
			login_state = done;
 704:	2e c0       	rjmp	.+92     	; 0x762 <login+0x1d4>
 706:	69 e9       	ldi	r22, 0x99	; 153
			break;
 708:	71 e0       	ldi	r23, 0x01	; 1
		}
		else {
			LCD_DisplayString(1, "Password wrong!");
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	73 dd       	rcall	.-1306   	; 0x1f4 <LCD_DisplayString>
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
			login_state = wrongWait;
 714:	26 c0       	rjmp	.+76     	; 0x762 <login+0x1d4>
 716:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			break;	
 71a:	83 30       	cpi	r24, 0x03	; 3
		}
		break;
		
		case wrongWait:
		if (try < 3) {
 71c:	30 f4       	brcc	.+12     	; 0x72a <login+0x19c>
 71e:	8f 5f       	subi	r24, 0xFF	; 255
 720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			try++;
 724:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <login_state>
			login_state = init;
 728:	1c c0       	rjmp	.+56     	; 0x762 <login+0x1d4>
 72a:	2f eb       	ldi	r18, 0xBF	; 191
			break;
 72c:	86 ec       	ldi	r24, 0xC6	; 198
 72e:	9d e2       	ldi	r25, 0x2D	; 45
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <login+0x1a2>
 738:	00 c0       	rjmp	.+0      	; 0x73a <login+0x1ac>
 73a:	00 00       	nop
 73c:	64 e7       	ldi	r22, 0x74	; 116
		}
		else {
			_delay_ms(15000);
			LCD_DisplayString(1, "Bye!");
 73e:	71 e0       	ldi	r23, 0x01	; 1
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	58 dd       	rcall	.-1360   	; 0x1f4 <LCD_DisplayString>
 744:	2f eb       	ldi	r18, 0xBF	; 191
 746:	86 ec       	ldi	r24, 0xC6	; 198
 748:	9d e2       	ldi	r25, 0x2D	; 45
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	80 40       	sbci	r24, 0x00	; 0
 74e:	90 40       	sbci	r25, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <login+0x1bc>
 752:	00 c0       	rjmp	.+0      	; 0x754 <login+0x1c6>
 754:	00 00       	nop
 756:	2b dd       	rcall	.-1450   	; 0x1ae <LCD_ClearScreen>
 758:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			_delay_ms(15000);
			LCD_ClearScreen();
 75c:	84 e0       	ldi	r24, 0x04	; 4
			try = 0;
 75e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <login_state>
			login_state = done;
 762:	cf 91       	pop	r28
 764:	08 95       	ret

00000766 <main>:
 766:	cf 93       	push	r28
		
		case done:
		break;
		
	}
}
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
}


int main(void)
{
 76c:	de b7       	in	r29, 0x3e	; 62
 76e:	28 97       	sbiw	r28, 0x08	; 8
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	DDRC = 0xF0; PORTC = 0x0F; // keypad
 77a:	80 ef       	ldi	r24, 0xF0	; 240
 77c:	87 b9       	out	0x07, r24	; 7
 77e:	8f e0       	ldi	r24, 0x0F	; 15
 780:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xFF; PORTB = 0x00; // LCD
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	84 b9       	out	0x04, r24	; 4
 786:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00; // LCD
 788:	8a b9       	out	0x0a, r24	; 10
 78a:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0xFF; PORTA = 0x00; // shift register
 78c:	81 b9       	out	0x01, r24	; 1
 78e:	12 b8       	out	0x02, r1	; 2
	
	
	unsigned char humPattern [] = {0x0e, 0x0e, 0x04, 0x04, 0x1f, 0x04, 0x0a, 0x0a} ;
 790:	88 e0       	ldi	r24, 0x08	; 8
 792:	e9 e0       	ldi	r30, 0x09	; 9
 794:	f1 e0       	ldi	r31, 0x01	; 1
 796:	de 01       	movw	r26, r28
 798:	11 96       	adiw	r26, 0x01	; 1
 79a:	01 90       	ld	r0, Z+
 79c:	0d 92       	st	X+, r0
 79e:	8a 95       	dec	r24
 7a0:	e1 f7       	brne	.-8      	; 0x79a <main+0x34>
	
	TimerOn();
 7a2:	52 dd       	rcall	.-1372   	; 0x248 <TimerOn>
	TimerSet(300);
 7a4:	6c e2       	ldi	r22, 0x2C	; 44
 7a6:	71 e0       	ldi	r23, 0x01	; 1
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
	
	A2D_init();
 7ac:	3c dd       	rcall	.-1416   	; 0x226 <TimerSet>
	
	LCD_init();
 7ae:	ac dd       	rcall	.-1192   	; 0x308 <A2D_init>
	LCD_WriteCommand(0x38); //Function Set: 8-bit, 2 Line, 5x7 Dots
 7b0:	09 dd       	rcall	.-1518   	; 0x1c4 <LCD_init>
 7b2:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x01); //Clear LCD
 7b4:	f3 dc       	rcall	.-1562   	; 0x19c <LCD_WriteCommand>
 7b6:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteCommand(0x06); //Entry Mode
 7b8:	f1 dc       	rcall	.-1566   	; 0x19c <LCD_WriteCommand>
 7ba:	86 e0       	ldi	r24, 0x06	; 6
	LCD_WriteCommand(0x0c); //Display on Cursor off
 7bc:	ef dc       	rcall	.-1570   	; 0x19c <LCD_WriteCommand>
 7be:	8c e0       	ldi	r24, 0x0C	; 12
 7c0:	ed dc       	rcall	.-1574   	; 0x19c <LCD_WriteCommand>
	
	ram_user[4] = eeprom_read_byte(&eeprom_user[4]);
 7c2:	89 e0       	ldi	r24, 0x09	; 9
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	57 d0       	rcall	.+174    	; 0x876 <eeprom_read_byte>
 7c8:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <ram_user+0x4>
	
	if (ram_user[4] != 1) { // no username made
 7cc:	81 30       	cpi	r24, 0x01	; 1
		LCD_DisplayString(1, "Enter Username");
 7ce:	29 f0       	breq	.+10     	; 0x7da <main+0x74>
 7d0:	69 ea       	ldi	r22, 0xA9	; 169
 7d2:	71 e0       	ldi	r23, 0x01	; 1
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	0e dd       	rcall	.-1508   	; 0x1f4 <LCD_DisplayString>
	}
	else { // username made
		LCD_DisplayString(1, "Welcome  ");
 7d8:	31 c0       	rjmp	.+98     	; 0x83c <main+0xd6>
 7da:	68 eb       	ldi	r22, 0xB8	; 184
 7dc:	71 e0       	ldi	r23, 0x01	; 1
		
		// creating the character
		customchar(humPattern,1);
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	09 dd       	rcall	.-1518   	; 0x1f4 <LCD_DisplayString>
 7e2:	61 e0       	ldi	r22, 0x01	; 1
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	ce 01       	movw	r24, r28
		LCD_WriteCommand(0x88);    //Place cursor at 8th position of first row
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	b2 dd       	rcall	.-1180   	; 0x350 <customchar>
		LCD_WriteData( 1 );
 7ec:	88 e8       	ldi	r24, 0x88	; 136
 7ee:	d6 dc       	rcall	.-1620   	; 0x19c <LCD_WriteCommand>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
		
		
		// outputting the username
		ram_user[0] = eeprom_read_byte(&eeprom_user[0]);
 7f2:	f7 dc       	rcall	.-1554   	; 0x1e2 <LCD_WriteData>
 7f4:	85 e0       	ldi	r24, 0x05	; 5
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	3e d0       	rcall	.+124    	; 0x876 <eeprom_read_byte>
 7fa:	07 ec       	ldi	r16, 0xC7	; 199
 7fc:	11 e0       	ldi	r17, 0x01	; 1
		ram_user[1] = eeprom_read_byte(&eeprom_user[1]);
 7fe:	f8 01       	movw	r30, r16
 800:	80 83       	st	Z, r24
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	90 e0       	ldi	r25, 0x00	; 0
		ram_user[2] = eeprom_read_byte(&eeprom_user[2]);
 806:	37 d0       	rcall	.+110    	; 0x876 <eeprom_read_byte>
 808:	f8 01       	movw	r30, r16
 80a:	81 83       	std	Z+1, r24	; 0x01
 80c:	87 e0       	ldi	r24, 0x07	; 7
		ram_user[3] = eeprom_read_byte(&eeprom_user[3]);
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	32 d0       	rcall	.+100    	; 0x876 <eeprom_read_byte>
 812:	f8 01       	movw	r30, r16
 814:	82 83       	std	Z+2, r24	; 0x02
 816:	88 e0       	ldi	r24, 0x08	; 8
		LCD_Cursor(11);
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	2d d0       	rcall	.+90     	; 0x876 <eeprom_read_byte>
 81c:	f8 01       	movw	r30, r16
		LCD_WriteData(ram_user[0]);
 81e:	83 83       	std	Z+3, r24	; 0x03
 820:	8b e0       	ldi	r24, 0x0B	; 11
 822:	c8 dc       	rcall	.-1648   	; 0x1b4 <LCD_Cursor>
 824:	f8 01       	movw	r30, r16
		LCD_WriteData(ram_user[1]);
 826:	80 81       	ld	r24, Z
 828:	dc dc       	rcall	.-1608   	; 0x1e2 <LCD_WriteData>
 82a:	f8 01       	movw	r30, r16
 82c:	81 81       	ldd	r24, Z+1	; 0x01
		LCD_WriteData(ram_user[2]);
 82e:	d9 dc       	rcall	.-1614   	; 0x1e2 <LCD_WriteData>
 830:	f8 01       	movw	r30, r16
 832:	82 81       	ldd	r24, Z+2	; 0x02
		LCD_WriteData(ram_user[3]);
 834:	d6 dc       	rcall	.-1620   	; 0x1e2 <LCD_WriteData>
 836:	f8 01       	movw	r30, r16
 838:	83 81       	ldd	r24, Z+3	; 0x03
 83a:	d3 dc       	rcall	.-1626   	; 0x1e2 <LCD_WriteData>
	}
	
	// state = start;
	cursor = 17;
 83c:	81 e1       	ldi	r24, 0x11	; 17
 83e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <cursor>
	LCD_Cursor(cursor);
 842:	b8 dc       	rcall	.-1680   	; 0x1b4 <LCD_Cursor>
 844:	07 ec       	ldi	r16, 0xC7	; 199
	
	while (1)
	{
		while(!TimerFlag) {};
		TimerFlag = 0;
		if (ram_user[4] != 1) {
 846:	11 e0       	ldi	r17, 0x01	; 1
 848:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <TimerFlag>
	cursor = 17;
	LCD_Cursor(cursor);
	
	while (1)
	{
		while(!TimerFlag) {};
 84c:	88 23       	and	r24, r24
 84e:	e1 f3       	breq	.-8      	; 0x848 <main+0xe2>
 850:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <TimerFlag>
		TimerFlag = 0;
 854:	f8 01       	movw	r30, r16
		if (ram_user[4] != 1) {
 856:	84 81       	ldd	r24, Z+4	; 0x04
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	11 f0       	breq	.+4      	; 0x860 <main+0xfa>
 85c:	91 dd       	rcall	.-1246   	; 0x380 <createAcc>
			createAcc();
 85e:	f4 cf       	rjmp	.-24     	; 0x848 <main+0xe2>
 860:	96 de       	rcall	.-724    	; 0x58e <login>
 862:	f2 cf       	rjmp	.-28     	; 0x848 <main+0xe2>

00000864 <__tablejump2__>:
		}
		else {
			login();
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	00 24       	eor	r0, r0
 86a:	00 1c       	adc	r0, r0
 86c:	0b be       	out	0x3b, r0	; 59
 86e:	07 90       	elpm	r0, Z+
 870:	f6 91       	elpm	r31, Z
 872:	e0 2d       	mov	r30, r0
 874:	09 94       	ijmp

00000876 <eeprom_read_byte>:
 876:	f9 99       	sbic	0x1f, 1	; 31
 878:	fe cf       	rjmp	.-4      	; 0x876 <eeprom_read_byte>
 87a:	92 bd       	out	0x22, r25	; 34
 87c:	81 bd       	out	0x21, r24	; 33
 87e:	f8 9a       	sbi	0x1f, 0	; 31
 880:	99 27       	eor	r25, r25
 882:	80 b5       	in	r24, 0x20	; 32
 884:	08 95       	ret

00000886 <eeprom_write_byte>:
 886:	26 2f       	mov	r18, r22

00000888 <eeprom_write_r18>:
 888:	f9 99       	sbic	0x1f, 1	; 31
 88a:	fe cf       	rjmp	.-4      	; 0x888 <eeprom_write_r18>
 88c:	1f ba       	out	0x1f, r1	; 31
 88e:	92 bd       	out	0x22, r25	; 34
 890:	81 bd       	out	0x21, r24	; 33
 892:	20 bd       	out	0x20, r18	; 32
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	f8 94       	cli
 898:	fa 9a       	sbi	0x1f, 2	; 31
 89a:	f9 9a       	sbi	0x1f, 1	; 31
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	08 95       	ret

000008a2 <_exit>:
 8a2:	f8 94       	cli

000008a4 <__stop_program>:
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <__stop_program>
